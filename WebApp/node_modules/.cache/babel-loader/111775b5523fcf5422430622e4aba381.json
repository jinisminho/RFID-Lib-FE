{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../../axios';\nimport * as authPrototype from '../prototype/auth';\nexport var authStart = function authStart() {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport var authSuccess = function authSuccess(token, userId, role) {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId,\n    role: role\n  };\n};\nexport var authFail = function authFail(error) {\n  return {\n    type: actionTypes.AUTH_FAILED,\n    error: error\n  };\n};\nexport var logout = function logout() {\n  console.log(localStorage.get(\"expiryDate\"));\n  localStorage.removeItem('accessToken');\n  localStorage.removeItem('expiryDate');\n  localStorage.removeItem('userId');\n  localStorage.removeItem('role');\n  localStorage.removeItem('username');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport var checkAuthTimeOut = function checkAuthTimeOut(expirationTime) {\n  return function (dispatch) {\n    setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\nexport var auth = function auth(username, password) {\n  return function (dispatch) {\n    dispatch(authStart());\n    var authData = {\n      username: username,\n      password: password\n    }; // let url='/auth/login'\n    // axios.post(url,authData)\n    // .then(response =>{\n    //     const expiryDate= new Date(response.data.expiryDate)\n    //     localStorage.setItem('accessToken',response.data.accessToken)\n    //     localStorage.setItem('expiryDate', expiryDate)\n    //     localStorage.setItem('userId', response.data.userId)\n    //     localStorage.setItem('role', response.data.role)\n    //     localStorage.setItem('username', response.data.username)\n    //     dispatch(authSuccess(response.data.accessToken, response.data.userId, response.data.role))\n    //     dispatch(checkAuthTimeOut(response.data.expiryDate- (new Date().getTime())))\n    // })\n    // .catch(err =>{\n    //     dispatch(authFail(err))\n    // })\n\n    var response = authPrototype.login(username, password);\n\n    if (response.status) {\n      var expiryDate = new Date(response.data.expiryDate);\n      localStorage.setItem('accessToken', response.data.accessToken);\n      localStorage.setItem('expiryDate', expiryDate);\n      localStorage.setItem('userId', response.data.userId);\n      localStorage.setItem('role', response.data.role);\n      localStorage.setItem('username', response.data.username);\n      dispatch(authSuccess(response.data.accessToken, response.data.userId, response.data.role));\n      dispatch(checkAuthTimeOut(response.data.expiryDate - new Date().getTime()));\n    } else {\n      dispatch(authFail(response.err));\n    }\n  };\n};\nexport var authStaff = function authStaff(username, password) {\n  return function (dispatch) {\n    dispatch(authStart());\n    var authData = {\n      username: username,\n      password: password\n    };\n    var url = '/api/auth/login';\n    axios.post(url, authData).then(function (response) {\n      var expiryDate = new Date(response.data.expiryTime);\n      localStorage.setItem('accessToken', response.data.accessToken);\n      localStorage.setItem('expiryDate', expiryDate);\n      localStorage.setItem('userId', response.data.userId);\n      localStorage.setItem('role', response.data.role);\n      localStorage.setItem('username', response.data.username);\n      dispatch(authSuccess(response.data.accessToken, response.data.userId, response.data.role));\n      dispatch(checkAuthTimeOut(response.data.expiryTime - new Date().getTime()));\n    }).catch(function (err) {\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport var setAuthRedirectPath = function setAuthRedirectPath(path) {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport var authCheckState = function authCheckState() {\n  return function (dispatch) {\n    var token = localStorage.getItem('accessToken');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      var expiryDate = new Date(localStorage.getItem('expiryDate'));\n\n      if (expiryDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        var userId = localStorage.getItem('userId');\n        var role = localStorage.getItem('role');\n        dispatch(authSuccess(token, userId, role));\n        dispatch(checkAuthTimeOut(expiryDate.getTime() - new Date().getTime()));\n      }\n    }\n  };\n};\nexport var changePasswordStart = function changePasswordStart() {\n  return {\n    type: actionTypes.CHANGE_PASSWORD_FAILED\n  };\n};\nexport var changePasswordFailed = function changePasswordFailed(error) {\n  return {\n    type: actionTypes.CHANGE_PASSWORD_FAILED,\n    error: error\n  };\n};\nexport var changePasswordSuccess = function changePasswordSuccess(token, userId) {\n  return {\n    type: actionTypes.CHANGE_PASSWORD_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport var changePassword = function changePassword(id, newPass) {\n  return function (dispatch) {\n    dispatch(changePasswordStart());\n    var changeData = {\n      idToken: id,\n      password: newPass,\n      returnSecureToken: true\n    };\n    var url = 'https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDlIksbOmIbctM2LrIvzxQJznoKcyIUEJI'; // if(!isSignup){\n    ///       url= 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDlIksbOmIbctM2LrIvzxQJznoKcyIUEJI'\n    //     \n    // }\n\n    axios.post(url, changeData).then(function (response) {\n      var expiryDate = new Date(new Date().getTime() + response.data.expiryDate * 1000);\n      localStorage.setItem('accessToken', response.data.accessToken);\n      localStorage.setItem('expiryDate', expiryDate);\n      localStorage.setItem('userId', response.data.userId);\n      dispatch(changePasswordSuccess(response.data.accessToken, response.data.userId));\n      dispatch(checkAuthTimeOut(response.data.expiresIn));\n    }).catch(function (err) {\n      dispatch(changePasswordFailed(err.response.data.error));\n    });\n  };\n};","map":{"version":3,"sources":["G:/FPT/Capstone/webapp/argon-dashboard-react-master/src/store/actions/auth.js"],"names":["actionTypes","axios","authPrototype","authStart","type","AUTH_START","authSuccess","token","userId","role","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAILED","logout","console","log","localStorage","get","removeItem","AUTH_LOGOUT","checkAuthTimeOut","expirationTime","dispatch","setTimeout","auth","username","password","authData","response","login","status","expiryDate","Date","data","setItem","accessToken","getTime","err","authStaff","url","post","then","expiryTime","catch","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem","changePasswordStart","CHANGE_PASSWORD_FAILED","changePasswordFailed","changePasswordSuccess","CHANGE_PASSWORD_SUCCESS","changePassword","id","newPass","changeData","returnSecureToken","expiresIn"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes'\r\nimport axios from '../../axios'\r\nimport * as authPrototype from '../prototype/auth'\r\n\r\nexport const authStart = ()=>{\r\n    return{\r\n        type: actionTypes.AUTH_START\r\n    };\r\n}\r\n\r\nexport const authSuccess = (token, userId,role)=>{\r\n    return{\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        idToken: token,\r\n        userId: userId,\r\n        role:role\r\n    };\r\n}\r\n\r\n\r\nexport const authFail =(error) =>{\r\n    return{\r\n        type: actionTypes.AUTH_FAILED,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const logout =()=>{\r\n    console.log(localStorage.get(\"expiryDate\"))\r\n    localStorage.removeItem('accessToken')\r\n    localStorage.removeItem('expiryDate')\r\n    localStorage.removeItem('userId')\r\n    localStorage.removeItem('role')\r\n    localStorage.removeItem('username')\r\n\r\n    return{\r\n        type: actionTypes.AUTH_LOGOUT\r\n    }\r\n}\r\n\r\nexport const checkAuthTimeOut = (expirationTime) =>{\r\n    return dispatch =>{\r\n        setTimeout(()=>{\r\n            dispatch(logout())\r\n        },expirationTime)\r\n    }\r\n}\r\n\r\nexport const auth = (username, password) =>{\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        const authData ={\r\n            username:username,\r\n            password:password,\r\n            }\r\n        // let url='/auth/login'\r\n        // axios.post(url,authData)\r\n        // .then(response =>{\r\n        //     const expiryDate= new Date(response.data.expiryDate)\r\n        //     localStorage.setItem('accessToken',response.data.accessToken)\r\n        //     localStorage.setItem('expiryDate', expiryDate)\r\n        //     localStorage.setItem('userId', response.data.userId)\r\n        //     localStorage.setItem('role', response.data.role)\r\n        //     localStorage.setItem('username', response.data.username)\r\n        //     dispatch(authSuccess(response.data.accessToken, response.data.userId, response.data.role))\r\n        //     dispatch(checkAuthTimeOut(response.data.expiryDate- (new Date().getTime())))\r\n        // })\r\n        // .catch(err =>{\r\n        //     dispatch(authFail(err))\r\n        // })\r\n        let response=authPrototype.login(username,password)\r\n        if(response.status){\r\n            const expiryDate= new Date(response.data.expiryDate)\r\n            localStorage.setItem('accessToken',response.data.accessToken)\r\n            localStorage.setItem('expiryDate', expiryDate)\r\n            localStorage.setItem('userId', response.data.userId)\r\n            localStorage.setItem('role', response.data.role)\r\n            localStorage.setItem('username', response.data.username)\r\n            dispatch(authSuccess(response.data.accessToken, response.data.userId, response.data.role))\r\n            dispatch(checkAuthTimeOut(response.data.expiryDate- (new Date().getTime())))\r\n        }else{\r\n            dispatch(authFail(response.err))\r\n        }\r\n    }\r\n}\r\nexport const authStaff = (username, password) =>{\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        const authData ={\r\n            username:username,\r\n            password:password,\r\n            }\r\n        let url='/api/auth/login'\r\n        axios.post(url,authData)\r\n        .then(response =>{\r\n            const expiryDate= new Date(response.data.expiryTime)\r\n            localStorage.setItem('accessToken',response.data.accessToken)\r\n            localStorage.setItem('expiryDate', expiryDate)\r\n            localStorage.setItem('userId', response.data.userId)\r\n            localStorage.setItem('role', response.data.role)\r\n            localStorage.setItem('username', response.data.username)\r\n            dispatch(authSuccess(response.data.accessToken, response.data.userId, response.data.role))\r\n            dispatch(checkAuthTimeOut(response.data.expiryTime- (new Date().getTime())))\r\n        })\r\n        .catch(err =>{\r\n            dispatch(authFail(err.response.data.error))\r\n        })\r\n    }\r\n}\r\nexport const setAuthRedirectPath = (path) =>{\r\n    return {\r\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\r\n        path: path\r\n    }\r\n}\r\n\r\nexport const authCheckState = ()=>{\r\n    return dispatch=>{\r\n        const token =localStorage.getItem('accessToken')\r\n        if(!token){\r\n            dispatch(logout())\r\n        }else{\r\n            const expiryDate = new Date(localStorage.getItem('expiryDate'))\r\n            if(expiryDate <= new Date()){\r\n                dispatch(logout())\r\n            }else{\r\n                const userId = localStorage.getItem('userId')\r\n                const role= localStorage.getItem('role')\r\n                dispatch(authSuccess(token, userId,role))\r\n                dispatch(checkAuthTimeOut(expiryDate.getTime()- (new Date().getTime())))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const changePasswordStart = ()=>{\r\n    return{\r\n        type: actionTypes.CHANGE_PASSWORD_FAILED\r\n    };\r\n}\r\nexport const changePasswordFailed =(error) =>{\r\n    return{\r\n        type: actionTypes.CHANGE_PASSWORD_FAILED,\r\n        error: error\r\n    }\r\n}\r\nexport const changePasswordSuccess = (token, userId)=>{\r\n    return{\r\n        type: actionTypes.CHANGE_PASSWORD_SUCCESS,\r\n        idToken: token,\r\n        userId: userId\r\n    };\r\n}\r\nexport const changePassword = (id, newPass) =>{\r\n    return dispatch => {\r\n        dispatch(changePasswordStart());\r\n        const changeData ={\r\n            idToken:id,\r\n            password:newPass,\r\n            returnSecureToken :true\r\n        }\r\n        let url='https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDlIksbOmIbctM2LrIvzxQJznoKcyIUEJI'\r\n        // if(!isSignup){\r\n        ///       url= 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDlIksbOmIbctM2LrIvzxQJznoKcyIUEJI'\r\n        //     \r\n        // }\r\n        axios.post(url,changeData)\r\n        .then(response =>{\r\n            const expiryDate= new Date(new Date().getTime() + response.data.expiryDate*1000)\r\n            localStorage.setItem('accessToken',response.data.accessToken)\r\n            localStorage.setItem('expiryDate', expiryDate)\r\n            localStorage.setItem('userId', response.data.userId)\r\n            dispatch(changePasswordSuccess(response.data.accessToken, response.data.userId))\r\n            dispatch(checkAuthTimeOut(response.data.expiresIn))\r\n        })\r\n        .catch(err =>{\r\n            dispatch(changePasswordFailed(err.response.data.error))\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}